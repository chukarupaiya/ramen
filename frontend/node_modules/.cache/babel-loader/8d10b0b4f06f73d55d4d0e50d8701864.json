{"ast":null,"code":"var _jsxFileName = \"/Users/karupaiyachu/Desktop/project/chat-app/frontend/src/components/Pay.js\",\n    _s = $RefreshSig$();\n\nimport { React } from \"react\";\nimport \"./Pay.css\";\nimport { FaDollarSign } from \"react-icons/fa\";\nimport { Input, InputGroup, InputLeftElement, InputRightElement } from \"@chakra-ui/input\";\nimport { Modal, ModalOverlay, ModalContent, ModalHeader, ModalFooter, ModalBody, ModalCloseButton, Button, useDisclosure, Text, Image } from \"@chakra-ui/react\";\nimport { FormControl } from \"@chakra-ui/form-control\";\nimport { Box } from \"@chakra-ui/layout\";\nimport \"./styles.css\";\nimport \"./SingleChat.css\";\nimport { IconButton, Spinner, useToast } from \"@chakra-ui/react\";\nimport { getSender, getSenderFull } from \"../config/ChatLogics\";\nimport { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { ArrowBackIcon } from \"@chakra-ui/icons\";\nimport ProfileModal from \"./miscellaneous/ProfileModal\";\nimport ScrollableChat from \"./ScrollableChat\";\nimport Lottie from \"react-lottie\";\nimport animationData from \"../animations/typing.json\";\nimport io from \"socket.io-client\";\nimport UpdateGroupChatModal from \"./miscellaneous/UpdateGroupChatModal\";\nimport { ChatState } from \"../Context/ChatProvider\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ENDPOINT = \"http://localhost:5000\"; // \"https://talk-a-tive.herokuapp.com\"; -> After deployment\n\nvar socket, selectedChatCompare;\n\nconst Pay = props => {\n  _s();\n\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [newMessage, setNewMessage] = useState(\"\");\n  const [socketConnected, setSocketConnected] = useState(false);\n  const [typing, setTyping] = useState(false);\n  const [istyping, setIsTyping] = useState(false);\n  const toast = useToast();\n  const defaultOptions = {\n    loop: true,\n    autoplay: true,\n    animationData: animationData,\n    rendererSettings: {\n      preserveAspectRatio: \"xMidYMid slice\"\n    }\n  };\n  const {\n    selectedChat,\n    setSelectedChat,\n    user,\n    notification,\n    setNotification\n  } = ChatState();\n\n  const fetchMessages = async () => {\n    if (!selectedChat) return;\n\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`\n        }\n      };\n      setLoading(true);\n      const {\n        data\n      } = await axios.get(`/api/message/${selectedChat._id}`, config);\n      setMessages(data);\n      setLoading(false);\n      socket.emit(\"join chat\", selectedChat._id);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Messages\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\"\n      });\n    }\n  };\n\n  const sendMessage = async event => {\n    if (event.key === \"Enter\" && newMessage) {\n      socket.emit(\"stop typing\", selectedChat._id);\n\n      try {\n        const config = {\n          headers: {\n            \"Content-type\": \"application/json\",\n            Authorization: `Bearer ${user.token}`\n          }\n        };\n        setNewMessage(\"\");\n        console.log(newMessage + \" \" + selectedChat);\n        const {\n          data\n        } = await axios.post(\"/api/message\", {\n          content: newMessage,\n          chatId: selectedChat,\n          payment: false\n        }, config);\n        socket.emit(\"new message\", data);\n        setMessages([...messages, data]);\n      } catch (error) {\n        toast({\n          title: \"Error Occured!\",\n          description: \"Failed to send the Message\",\n          status: \"error\",\n          duration: 5000,\n          isClosable: true,\n          position: \"bottom\"\n        });\n      }\n    }\n  };\n\n  useEffect(() => {\n    fetchMessages();\n    selectedChatCompare = selectedChat; // eslint-disable-next-line\n  }, [selectedChat]);\n  useEffect(() => {\n    socket.on(\"message recieved\", newMessageRecieved => {\n      if (!selectedChatCompare || // if chat is not selected or doesn't match current chat\n      selectedChatCompare._id !== newMessageRecieved.chat._id) {\n        if (!notification.includes(newMessageRecieved)) {\n          setNotification([newMessageRecieved, ...notification]);\n          setFetchAgain(!fetchAgain);\n        }\n      } else {\n        setMessages([...messages, newMessageRecieved]);\n      }\n    });\n  });\n\n  const typingHandler = e => {\n    setNewMessage(e.target.value);\n    if (!socketConnected) return;\n\n    if (!typing) {\n      setTyping(true);\n      socket.emit(\"typing\", selectedChat._id);\n    }\n\n    let lastTypingTime = new Date().getTime();\n    var timerLength = 3000;\n    setTimeout(() => {\n      var timeNow = new Date().getTime();\n      var timeDiff = timeNow - lastTypingTime;\n\n      if (timeDiff >= timerLength && typing) {\n        socket.emit(\"stop typing\", selectedChat._id);\n        setTyping(false);\n      }\n    }, timerLength);\n  };\n\n  useEffect(() => {\n    socket = io(ENDPOINT);\n    socket.emit(\"setup\", user);\n    socket.on(\"connected\", () => setSocketConnected(true));\n    socket.on(\"typing\", () => setIsTyping(true));\n    socket.on(\"stop typing\", () => setIsTyping(false));\n    console.log(socket); // eslint-disable-next-line\n  }, []);\n  const {\n    isOpen,\n    onOpen,\n    onClose\n  } = useDisclosure();\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [props.children ? /*#__PURE__*/_jsxDEV(\"span\", {\n      onClick: onOpen,\n      children: props.children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(IconButton, {\n      d: {\n        base: \"flex\"\n      },\n      icon: /*#__PURE__*/_jsxDEV(FaDollarSign, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 17\n      }, this),\n      onClick: onOpen,\n      colorScheme: \"grey\",\n      _hover: {\n        bg: \"rgb(2, 163, 34);\"\n      },\n      bg: \"rgb(114,137,218)\",\n      borderRadius: \"50%\",\n      marginLeft: \"8px\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      size: \"lg\",\n      onClose: onClose,\n      isOpen: isOpen,\n      isCentered: true,\n      children: [/*#__PURE__*/_jsxDEV(ModalOverlay, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ModalContent, {\n        h: \"410px\",\n        bg: \"rgb(30,33,36)\",\n        color: \"white\",\n        children: [/*#__PURE__*/_jsxDEV(ModalHeader, {\n          fontSize: \"40px\",\n          fontFamily: \"Work sans\",\n          d: \"flex\",\n          justifyContent: \"center\",\n          children: \"Payment\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ModalCloseButton, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ModalBody, {\n          d: \"flex\",\n          flexDir: \"column\",\n          alignItems: \"center\",\n          justifyContent: \"space-between\",\n          children: [/*#__PURE__*/_jsxDEV(Image, {\n            borderRadius: \"full\",\n            boxSize: \"100px\",\n            src: user.pic,\n            alt: user.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 224,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: /*#__PURE__*/_jsxDEV(FormControl, {\n              onSubmit: sendMessage,\n              id: \"first-name\",\n              isRequired: true,\n              mt: 3,\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                style: {\n                  margin: \"auto\",\n                  display: \"flex\"\n                },\n                children: /*#__PURE__*/_jsxDEV(InputGroup, {\n                  children: [/*#__PURE__*/_jsxDEV(InputLeftElement, {\n                    pointerEvents: \"none\",\n                    color: \"gray.300\",\n                    fontSize: \"1.2em\",\n                    children: \"$\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 240,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(Input, {\n                    placeholder: \"Enter amount\",\n                    type: \"number\",\n                    variant: \"filled\",\n                    bg: \"rgb(54,57,62)\",\n                    color: \"white\",\n                    focusBorderColor: \"rgb(54,57,62)\",\n                    value: newMessage,\n                    width: \"97%\",\n                    onChange: typingHandler,\n                    _hover: {\n                      bg: \"rgb(54,57,62)\"\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 246,\n                    columnNumber: 21\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 239,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 238,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 232,\n              columnNumber: 15\n            }, this)\n          }, void 0, false)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ModalFooter, {\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            onClick: onClose,\n            bg: \"rgb(114,137,218)\",\n            marginRight: \"10px\",\n            children: \"Request\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 265,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            onClick: () => {\n              onClose();\n              sendMessage();\n            },\n            bg: \"rgb(114,137,218)\",\n            children: \"Pay\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 272,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 264,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Pay, \"T8Dgu3vJlU7gLFLUYv0+exVZHwc=\", false, function () {\n  return [useToast, useDisclosure];\n});\n\n_c = Pay;\nexport default Pay;\n\nvar _c;\n\n$RefreshReg$(_c, \"Pay\");","map":{"version":3,"sources":["/Users/karupaiyachu/Desktop/project/chat-app/frontend/src/components/Pay.js"],"names":["React","FaDollarSign","Input","InputGroup","InputLeftElement","InputRightElement","Modal","ModalOverlay","ModalContent","ModalHeader","ModalFooter","ModalBody","ModalCloseButton","Button","useDisclosure","Text","Image","FormControl","Box","IconButton","Spinner","useToast","getSender","getSenderFull","useEffect","useState","axios","ArrowBackIcon","ProfileModal","ScrollableChat","Lottie","animationData","io","UpdateGroupChatModal","ChatState","ENDPOINT","socket","selectedChatCompare","Pay","props","messages","setMessages","loading","setLoading","newMessage","setNewMessage","socketConnected","setSocketConnected","typing","setTyping","istyping","setIsTyping","toast","defaultOptions","loop","autoplay","rendererSettings","preserveAspectRatio","selectedChat","setSelectedChat","user","notification","setNotification","fetchMessages","config","headers","Authorization","token","data","get","_id","emit","error","title","description","status","duration","isClosable","position","sendMessage","event","key","console","log","post","content","chatId","payment","on","newMessageRecieved","chat","includes","setFetchAgain","fetchAgain","typingHandler","e","target","value","lastTypingTime","Date","getTime","timerLength","setTimeout","timeNow","timeDiff","isOpen","onOpen","onClose","children","base","bg","pic","name","margin","display"],"mappings":"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","sourcesContent":["import { React } from \"react\";\nimport \"./Pay.css\";\nimport { FaDollarSign } from \"react-icons/fa\";\nimport {\n  Input,\n  InputGroup,\n  InputLeftElement,\n  InputRightElement,\n} from \"@chakra-ui/input\";\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  useDisclosure,\n  Text,\n  Image,\n} from \"@chakra-ui/react\";\nimport { FormControl } from \"@chakra-ui/form-control\";\nimport { Box } from \"@chakra-ui/layout\";\nimport \"./styles.css\";\nimport \"./SingleChat.css\";\nimport { IconButton, Spinner, useToast } from \"@chakra-ui/react\";\nimport { getSender, getSenderFull } from \"../config/ChatLogics\";\nimport { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { ArrowBackIcon } from \"@chakra-ui/icons\";\nimport ProfileModal from \"./miscellaneous/ProfileModal\";\nimport ScrollableChat from \"./ScrollableChat\";\nimport Lottie from \"react-lottie\";\nimport animationData from \"../animations/typing.json\";\n\nimport io from \"socket.io-client\";\nimport UpdateGroupChatModal from \"./miscellaneous/UpdateGroupChatModal\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nconst ENDPOINT = \"http://localhost:5000\"; // \"https://talk-a-tive.herokuapp.com\"; -> After deployment\nvar socket, selectedChatCompare;\n\nconst Pay = (props) => {\n    const [messages, setMessages] = useState([]);\n    const [loading, setLoading] = useState(false);\n    const [newMessage, setNewMessage] = useState(\"\");\n    const [socketConnected, setSocketConnected] = useState(false);\n    const [typing, setTyping] = useState(false);\n    const [istyping, setIsTyping] = useState(false);\n    const toast = useToast();\n  \n    const defaultOptions = {\n      loop: true,\n      autoplay: true,\n      animationData: animationData,\n      rendererSettings: {\n        preserveAspectRatio: \"xMidYMid slice\",\n      },\n    };\n    const { selectedChat, setSelectedChat, user, notification, setNotification } =\n      ChatState();\n  \n    const fetchMessages = async () => {\n      if (!selectedChat) return;\n  \n      try {\n        const config = {\n          headers: {\n            Authorization: `Bearer ${user.token}`,\n          },\n        };\n  \n        setLoading(true);\n  \n        const { data } = await axios.get(\n          `/api/message/${selectedChat._id}`,\n          config\n        );\n        setMessages(data);\n        setLoading(false);\n  \n        socket.emit(\"join chat\", selectedChat._id);\n      } catch (error) {\n        toast({\n          title: \"Error Occured!\",\n          description: \"Failed to Load the Messages\",\n          status: \"error\",\n          duration: 5000,\n          isClosable: true,\n          position: \"bottom\",\n        });\n      }\n    };\n  \n    const sendMessage = async (event) => {\n      if (event.key === \"Enter\" && newMessage) {\n        socket.emit(\"stop typing\", selectedChat._id);\n        try {\n          const config = {\n            headers: {\n              \"Content-type\": \"application/json\",\n              Authorization: `Bearer ${user.token}`,\n            },\n          };\n          setNewMessage(\"\");\n          console.log(newMessage+\" \"+selectedChat);\n          const { data } = await axios.post(\n            \"/api/message\",\n            {\n              content: newMessage,\n              chatId: selectedChat,\n              payment:false,\n            },\n            config\n          );\n          socket.emit(\"new message\", data);\n          setMessages([...messages, data]);\n        } catch (error) {\n          toast({\n            title: \"Error Occured!\",\n            description: \"Failed to send the Message\",\n            status: \"error\",\n            duration: 5000,\n            isClosable: true,\n            position: \"bottom\",\n          });\n        }\n      }\n    };\n  \n    \n  \n    useEffect(() => {\n      fetchMessages();\n  \n      selectedChatCompare = selectedChat;\n      // eslint-disable-next-line\n    }, [selectedChat]);\n  \n    useEffect(() => {\n      socket.on(\"message recieved\", (newMessageRecieved) => {\n        if (\n          !selectedChatCompare || // if chat is not selected or doesn't match current chat\n          selectedChatCompare._id !== newMessageRecieved.chat._id\n        ) {\n          if (!notification.includes(newMessageRecieved)) {\n            setNotification([newMessageRecieved, ...notification]);\n            setFetchAgain(!fetchAgain);\n          }\n        } else {\n          setMessages([...messages, newMessageRecieved]);\n        }\n      });\n    });\n  \n    const typingHandler = (e) => {\n      setNewMessage(e.target.value);\n      if (!socketConnected) return;\n  \n      if (!typing) {\n        setTyping(true);\n        socket.emit(\"typing\", selectedChat._id);\n      }\n      let lastTypingTime = new Date().getTime();\n      var timerLength = 3000;\n      setTimeout(() => {\n        var timeNow = new Date().getTime();\n        var timeDiff = timeNow - lastTypingTime;\n        if (timeDiff >= timerLength && typing) {\n          socket.emit(\"stop typing\", selectedChat._id);\n          setTyping(false);\n        }\n      }, timerLength);\n    };\n  \n    useEffect(() => {\n      socket = io(ENDPOINT);\n      socket.emit(\"setup\", user);\n      socket.on(\"connected\", () => setSocketConnected(true));\n      socket.on(\"typing\", () => setIsTyping(true));\n      socket.on(\"stop typing\", () => setIsTyping(false));\n      console.log(socket);\n      // eslint-disable-next-line\n    }, []);\n  \n\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  return (\n    <>\n      {props.children ? (\n        <span onClick={onOpen}>{props.children}</span>\n      ) : (\n        <IconButton\n          d={{ base: \"flex\" }}\n          icon={<FaDollarSign />}\n          onClick={onOpen}\n          colorScheme=\"grey\"\n          _hover={{ bg: \"rgb(2, 163, 34);\" }}\n          bg=\"rgb(114,137,218)\"\n          borderRadius=\"50%\"\n          marginLeft=\"8px\"\n        />\n      )}\n      <Modal size=\"lg\" onClose={onClose} isOpen={isOpen} isCentered>\n        <ModalOverlay />\n        <ModalContent h=\"410px\" bg={\"rgb(30,33,36)\"} color=\"white\">\n          <ModalHeader\n            fontSize=\"40px\"\n            fontFamily=\"Work sans\"\n            d=\"flex\"\n            justifyContent=\"center\"\n          >\n            {\"Payment\"}\n          </ModalHeader>\n          <ModalCloseButton />\n          <ModalBody\n            d=\"flex\"\n            flexDir=\"column\"\n            alignItems=\"center\"\n            justifyContent=\"space-between\"\n          >\n            <Image\n              borderRadius=\"full\"\n              boxSize=\"100px\"\n              src={user.pic}\n              alt={user.name}\n            />\n\n            <>\n              <FormControl\n                onSubmit={sendMessage}\n                id=\"first-name\"\n                isRequired\n                mt={3}\n              >\n                <div style={{ margin: \"auto\", display: \"flex\" }}>\n                  <InputGroup>\n                    <InputLeftElement\n                      pointerEvents=\"none\"\n                      color=\"gray.300\"\n                      fontSize=\"1.2em\"\n                      children=\"$\"\n                    />\n                    <Input\n                      placeholder=\"Enter amount\"\n                      type=\"number\"\n                      variant=\"filled\"\n                      bg=\"rgb(54,57,62)\"\n                      color=\"white\"\n                      focusBorderColor=\"rgb(54,57,62)\"\n                      value={newMessage}\n                      width=\"97%\"\n                      onChange={typingHandler}\n                      _hover={{ bg: \"rgb(54,57,62)\" }}\n                    />\n                  </InputGroup>\n                </div>\n              </FormControl>\n            </>\n\n          </ModalBody>\n          <ModalFooter>\n            <Button\n              onClick={onClose}\n              bg=\"rgb(114,137,218)\"\n              marginRight={\"10px\"}\n            >\n              Request\n            </Button>\n            <Button\n              onClick={() => {\n                onClose();\n                sendMessage();\n              }}\n              bg=\"rgb(114,137,218)\"\n            >\n              Pay\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default Pay;\n"]},"metadata":{},"sourceType":"module"}