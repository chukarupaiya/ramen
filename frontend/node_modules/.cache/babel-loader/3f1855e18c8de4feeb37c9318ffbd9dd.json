{"ast":null,"code":"var _jsxFileName = \"/Users/karupaiyachu/Desktop/project/chat-app/frontend/src/components/Pay.js\",\n    _s = $RefreshSig$();\n\nimport { React } from \"react\";\nimport \"./Pay.css\";\nimport { FaDollarSign } from \"react-icons/fa\";\nimport { Input, InputGroup, InputLeftElement, InputRightElement } from \"@chakra-ui/input\";\nimport { Modal, ModalOverlay, ModalContent, ModalHeader, ModalFooter, ModalBody, ModalCloseButton, Button, useDisclosure, Text, Image, Select } from \"@chakra-ui/react\";\nimport { FormControl } from \"@chakra-ui/form-control\";\nimport { Box } from \"@chakra-ui/layout\";\nimport \"./styles.css\";\nimport \"./SingleChat.css\";\nimport { IconButton, Spinner, useToast } from \"@chakra-ui/react\";\nimport { getSender, getSenderFull } from \"../config/ChatLogics\";\nimport { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { ArrowBackIcon } from \"@chakra-ui/icons\";\nimport ProfileModal from \"./miscellaneous/ProfileModal\";\nimport ScrollableChat from \"./ScrollableChat\";\nimport Lottie from \"react-lottie\";\nimport animationData from \"../animations/typing.json\";\nimport io from \"socket.io-client\";\nimport UpdateGroupChatModal from \"./miscellaneous/UpdateGroupChatModal\";\nimport { ChatState } from \"../Context/ChatProvider\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ENDPOINT = \"http://localhost:5000\"; // \"https://talk-a-tive.herokuapp.com\"; -> After deployment\n\nvar socket, selectedChatCompare;\n\nconst Pay = ({\n  fetchAgain,\n  setFetchAgain,\n  fetchMessages,\n  refAgain,\n  toClose\n}) => {\n  _s();\n\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [newMessage, setNewMessage] = useState(\"\");\n  const [socketConnected, setSocketConnected] = useState(false);\n  const [typing, setTyping] = useState(false);\n  const [istyping, setIsTyping] = useState(false);\n  const toast = useToast();\n  const defaultOptions = {\n    loop: true,\n    autoplay: true,\n    animationData: animationData,\n    rendererSettings: {\n      preserveAspectRatio: \"xMidYMid slice\"\n    }\n  };\n  const {\n    selectedChat,\n    setSelectedChat,\n    user,\n    notification,\n    setNotification\n  } = ChatState();\n\n  const sendMessage = async event => {\n    if (newMessage) {\n      socket.emit(\"stop typing\", selectedChat._id);\n\n      try {\n        const config = {\n          headers: {\n            \"Content-type\": \"application/json\",\n            Authorization: `Bearer ${user.token}`\n          }\n        };\n        setNewMessage(\"\");\n        console.log(newMessage + \" \" + selectedChat);\n        const {\n          data\n        } = await axios.post(\"/api/message\", {\n          content: newMessage,\n          chatId: selectedChat,\n          payment: true\n        }, config);\n        socket.emit(\"new message\", data);\n        setMessages([...messages, data]);\n      } catch (error) {\n        toast({\n          title: \"Error Occured!\",\n          description: \"Failed to send the Message\",\n          status: \"error\",\n          duration: 5000,\n          isClosable: true,\n          position: \"bottom\"\n        });\n      }\n\n      refAgain();\n    }\n  };\n\n  const typingHandler = e => {\n    setNewMessage(e.target.value);\n    if (!socketConnected) return;\n\n    if (!typing) {\n      setTyping(true);\n      socket.emit(\"typing\", selectedChat._id);\n    }\n\n    let lastTypingTime = new Date().getTime();\n    var timerLength = 3000;\n    setTimeout(() => {\n      var timeNow = new Date().getTime();\n      var timeDiff = timeNow - lastTypingTime;\n\n      if (timeDiff >= timerLength && typing) {\n        socket.emit(\"stop typing\", selectedChat._id);\n        setTyping(false);\n      }\n    }, timerLength);\n  };\n\n  useEffect(() => {\n    socket = io(ENDPOINT);\n    socket.emit(\"setup\", user);\n    socket.on(\"connected\", () => setSocketConnected(true));\n    socket.on(\"typing\", () => setIsTyping(true));\n    socket.on(\"stop typing\", () => setIsTyping(false));\n    console.log(socket); // eslint-disable-next-line\n  }, []);\n  useEffect(() => {\n    socket.on(\"message recieved\", newMessageRecieved => {\n      if (!selectedChatCompare || // if chat is not selected or doesn't match current chat\n      selectedChatCompare._id !== newMessageRecieved.chat._id) {\n        if (!notification.includes(newMessageRecieved)) {\n          setNotification([newMessageRecieved, ...notification]);\n          setFetchAgain(!fetchAgain);\n        }\n      } else {\n        setMessages([...messages, newMessageRecieved]);\n      }\n    });\n  });\n  const {\n    isOpen,\n    onOpen,\n    onClose\n  } = useDisclosure();\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Button, {\n      width: \"100%\",\n      height: \"100%\",\n      margin: \"0px\",\n      padding: \"0px\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        class: \"choice_label\",\n        children: \"TOKEN\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n        d: {\n          base: \"flex\"\n        },\n        icon: /*#__PURE__*/_jsxDEV(FaDollarSign, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 17\n        }, this),\n        onClick: onOpen,\n        colorScheme: \"grey\",\n        _hover: {\n          bg: \"rgb(68, 201, 34);\"\n        },\n        bg: \"rgb(114,137,218)\",\n        color: \"white\",\n        width: \"100%\",\n        height: \"100%\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      size: \"lg\",\n      onClose: () => {\n        onClose();\n        toClose();\n      },\n      isOpen: isOpen,\n      isCentered: true,\n      children: [/*#__PURE__*/_jsxDEV(ModalOverlay, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ModalContent, {\n        h: \"410px\",\n        bg: \"rgb(30,33,36)\",\n        color: \"white\",\n        children: [/*#__PURE__*/_jsxDEV(ModalHeader, {\n          fontSize: \"40px\",\n          fontFamily: \"Work sans\",\n          d: \"flex\",\n          justifyContent: \"center\",\n          children: \"Payment\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ModalCloseButton, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ModalBody, {\n          d: \"flex\",\n          flexDir: \"column\",\n          alignItems: \"center\",\n          justifyContent: \"space-between\",\n          children: /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: /*#__PURE__*/_jsxDEV(FormControl, {\n              onSubmit: sendMessage,\n              id: \"first-name\",\n              isRequired: true,\n              mt: 3,\n              children: [/*#__PURE__*/_jsxDEV(Input, {\n                placeholder: \"Enter amount $\",\n                type: \"number\",\n                variant: \"filled\",\n                bg: \"rgb(54,57,62)\",\n                color: \"white\",\n                focusBorderColor: \"rgb(54,57,62)\",\n                value: newMessage,\n                width: \"50%\",\n                textAlign: \"Center\",\n                margin: \"auto\",\n                height: \"100px\",\n                fontSize: \"20px\",\n                onChange: typingHandler,\n                _hover: {\n                  bg: \"rgb(54,57,62)\"\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 208,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Select, {\n                placeholder: \"select the token\",\n                size: \"lg\",\n                children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"option1\",\n                  children: \"ETH\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 225,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"option2\",\n                  children: \"WAT\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 226,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"option3\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 227,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 224,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 201,\n              columnNumber: 15\n            }, this)\n          }, void 0, false)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ModalFooter, {\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            onClick: () => {\n              onClose();\n              toClose();\n            },\n            bg: \"rgb(114,137,218)\",\n            marginRight: \"10px\",\n            children: \"Request\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 234,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            onClick: () => {\n              onClose();\n              sendMessage();\n              toClose();\n            },\n            bg: \"rgb(114,137,218)\",\n            children: \"Pay\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 244,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Pay, \"0ELvOQ6pay4FOIrmuTFhMi/c4jQ=\", false, function () {\n  return [useToast, useDisclosure];\n});\n\n_c = Pay;\nexport default Pay;\n\nvar _c;\n\n$RefreshReg$(_c, \"Pay\");","map":{"version":3,"sources":["/Users/karupaiyachu/Desktop/project/chat-app/frontend/src/components/Pay.js"],"names":["React","FaDollarSign","Input","InputGroup","InputLeftElement","InputRightElement","Modal","ModalOverlay","ModalContent","ModalHeader","ModalFooter","ModalBody","ModalCloseButton","Button","useDisclosure","Text","Image","Select","FormControl","Box","IconButton","Spinner","useToast","getSender","getSenderFull","useEffect","useState","axios","ArrowBackIcon","ProfileModal","ScrollableChat","Lottie","animationData","io","UpdateGroupChatModal","ChatState","ENDPOINT","socket","selectedChatCompare","Pay","fetchAgain","setFetchAgain","fetchMessages","refAgain","toClose","messages","setMessages","loading","setLoading","newMessage","setNewMessage","socketConnected","setSocketConnected","typing","setTyping","istyping","setIsTyping","toast","defaultOptions","loop","autoplay","rendererSettings","preserveAspectRatio","selectedChat","setSelectedChat","user","notification","setNotification","sendMessage","event","emit","_id","config","headers","Authorization","token","console","log","data","post","content","chatId","payment","error","title","description","status","duration","isClosable","position","typingHandler","e","target","value","lastTypingTime","Date","getTime","timerLength","setTimeout","timeNow","timeDiff","on","newMessageRecieved","chat","includes","isOpen","onOpen","onClose","base","bg"],"mappings":"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","sourcesContent":["import { React } from \"react\";\nimport \"./Pay.css\";\nimport { FaDollarSign } from \"react-icons/fa\";\nimport {\n  Input,\n  InputGroup,\n  InputLeftElement,\n  InputRightElement,\n} from \"@chakra-ui/input\";\n\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  useDisclosure,\n  Text,\n  Image,\n  Select,\n} from \"@chakra-ui/react\";\nimport { FormControl } from \"@chakra-ui/form-control\";\nimport { Box } from \"@chakra-ui/layout\";\nimport \"./styles.css\";\nimport \"./SingleChat.css\";\nimport { IconButton, Spinner, useToast } from \"@chakra-ui/react\";\nimport { getSender, getSenderFull } from \"../config/ChatLogics\";\nimport { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { ArrowBackIcon } from \"@chakra-ui/icons\";\nimport ProfileModal from \"./miscellaneous/ProfileModal\";\nimport ScrollableChat from \"./ScrollableChat\";\nimport Lottie from \"react-lottie\";\nimport animationData from \"../animations/typing.json\";\n\nimport io from \"socket.io-client\";\nimport UpdateGroupChatModal from \"./miscellaneous/UpdateGroupChatModal\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nconst ENDPOINT = \"http://localhost:5000\"; // \"https://talk-a-tive.herokuapp.com\"; -> After deployment\nvar socket, selectedChatCompare;\n\nconst Pay = ({\n  fetchAgain,\n  setFetchAgain,\n  fetchMessages,\n  refAgain,\n  toClose,\n}) => {\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [newMessage, setNewMessage] = useState(\"\");\n  const [socketConnected, setSocketConnected] = useState(false);\n  const [typing, setTyping] = useState(false);\n  const [istyping, setIsTyping] = useState(false);\n  const toast = useToast();\n\n  const defaultOptions = {\n    loop: true,\n    autoplay: true,\n    animationData: animationData,\n    rendererSettings: {\n      preserveAspectRatio: \"xMidYMid slice\",\n    },\n  };\n  const { selectedChat, setSelectedChat, user, notification, setNotification } =\n    ChatState();\n\n  const sendMessage = async (event) => {\n    if (newMessage) {\n      socket.emit(\"stop typing\", selectedChat._id);\n      try {\n        const config = {\n          headers: {\n            \"Content-type\": \"application/json\",\n            Authorization: `Bearer ${user.token}`,\n          },\n        };\n        setNewMessage(\"\");\n        console.log(newMessage + \" \" + selectedChat);\n        const { data } = await axios.post(\n          \"/api/message\",\n          {\n            content: newMessage,\n            chatId: selectedChat,\n            payment: true,\n          },\n          config\n        );\n        socket.emit(\"new message\", data);\n        setMessages([...messages, data]);\n      } catch (error) {\n        toast({\n          title: \"Error Occured!\",\n          description: \"Failed to send the Message\",\n          status: \"error\",\n          duration: 5000,\n          isClosable: true,\n          position: \"bottom\",\n        });\n      }\n      refAgain();\n    }\n  };\n\n  const typingHandler = (e) => {\n    setNewMessage(e.target.value);\n    if (!socketConnected) return;\n\n    if (!typing) {\n      setTyping(true);\n      socket.emit(\"typing\", selectedChat._id);\n    }\n    let lastTypingTime = new Date().getTime();\n    var timerLength = 3000;\n    setTimeout(() => {\n      var timeNow = new Date().getTime();\n      var timeDiff = timeNow - lastTypingTime;\n      if (timeDiff >= timerLength && typing) {\n        socket.emit(\"stop typing\", selectedChat._id);\n        setTyping(false);\n      }\n    }, timerLength);\n  };\n\n  useEffect(() => {\n    socket = io(ENDPOINT);\n    socket.emit(\"setup\", user);\n    socket.on(\"connected\", () => setSocketConnected(true));\n    socket.on(\"typing\", () => setIsTyping(true));\n    socket.on(\"stop typing\", () => setIsTyping(false));\n    console.log(socket);\n    // eslint-disable-next-line\n  }, []);\n\n  useEffect(() => {\n    socket.on(\"message recieved\", (newMessageRecieved) => {\n      if (\n        !selectedChatCompare || // if chat is not selected or doesn't match current chat\n        selectedChatCompare._id !== newMessageRecieved.chat._id\n      ) {\n        if (!notification.includes(newMessageRecieved)) {\n          setNotification([newMessageRecieved, ...notification]);\n          setFetchAgain(!fetchAgain);\n        }\n      } else {\n        setMessages([...messages, newMessageRecieved]);\n      }\n    });\n  });\n\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  return (\n    <>\n      <Button width=\"100%\" height=\"100%\" margin={\"0px\"} padding=\"0px\">\n        <p class=\"choice_label\">TOKEN</p>\n        <IconButton\n          d={{ base: \"flex\" }}\n          icon={<FaDollarSign />}\n          onClick={onOpen}\n          colorScheme=\"grey\"\n          _hover={{ bg: \"rgb(68, 201, 34);\" }}\n          bg=\"rgb(114,137,218)\"\n          color={\"white\"}\n          width=\"100%\"\n          height=\"100%\"\n        />\n      </Button>\n\n      <Modal\n        size=\"lg\"\n        onClose={() => {\n          onClose();\n          toClose();\n        }}\n        isOpen={isOpen}\n        isCentered\n      >\n        <ModalOverlay />\n        <ModalContent h=\"410px\" bg={\"rgb(30,33,36)\"} color=\"white\">\n          <ModalHeader\n            fontSize=\"40px\"\n            fontFamily=\"Work sans\"\n            d=\"flex\"\n            justifyContent=\"center\"\n          >\n            {\"Payment\"}\n          </ModalHeader>\n          <ModalCloseButton />\n          <ModalBody\n            d=\"flex\"\n            flexDir=\"column\"\n            alignItems=\"center\"\n            justifyContent=\"space-between\"\n          >\n            <>\n              <FormControl\n                onSubmit={sendMessage}\n                id=\"first-name\"\n                isRequired\n                mt={3}\n              >\n                \n                  <Input\n                    placeholder=\"Enter amount $\"\n                    type=\"number\"\n                    variant=\"filled\"\n                    bg=\"rgb(54,57,62)\"\n                    color=\"white\"\n                    focusBorderColor=\"rgb(54,57,62)\"\n                    value={newMessage}\n                    width=\"50%\"\n                    textAlign={\"Center\"}\n                    margin=\"auto\"\n                    height={\"100px\"}\n                    fontSize=\"20px\"\n                    onChange={typingHandler}\n                    _hover={{ bg: \"rgb(54,57,62)\" }}\n                  />\n                  <Select placeholder=\"select the token\" size=\"lg\">\n                    <option value=\"option1\">ETH</option>\n                    <option value=\"option2\">WAT</option>\n                    <option value=\"option3\"></option>\n                  </Select>\n                \n              </FormControl>\n            </>\n          </ModalBody>\n          <ModalFooter>\n            <Button\n              onClick={() => {\n                onClose();\n                toClose();\n              }}\n              bg=\"rgb(114,137,218)\"\n              marginRight={\"10px\"}\n            >\n              Request\n            </Button>\n            <Button\n              onClick={() => {\n                onClose();\n                sendMessage();\n                toClose();\n              }}\n              bg=\"rgb(114,137,218)\"\n            >\n              Pay\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default Pay;\n"]},"metadata":{},"sourceType":"module"}